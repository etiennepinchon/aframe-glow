/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/glow.mjs");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/LoopSubdivision.mjs":
/*!*********************************!*\
  !*** ./src/LoopSubdivision.mjs ***!
  \*********************************/
/*! exports provided: LoopSubdivision */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoopSubdivision\", function() { return LoopSubdivision; });\n/**\n * @description Loop Subdivision Surface\n * @about       Smooth subdivision surface modifier for use with three.js BufferGeometry.\n * @author      Stephens Nunnally <@stevinz>\n * @license     MIT - Copyright (c) 2022 Stephens Nunnally\n * @source      https://github.com/stevinz/three-subdivide\n */\n/////////////////////////////////////////////////////////////////////////////////////\n//\n//  Functions\n//      modify              Applies Loop subdivision to BufferGeometry, returns new BufferGeometry\n//      edgeSplit           Splits all triangles at edges shared by coplanar triangles\n//      flat                One iteration of Loop subdivision, without point averaging\n//      smooth              One iteration of Loop subdivision, with point averaging\n//\n//  Info\n//      This modifier uses the Loop (Charles Loop, 1987) subdivision surface algorithm to smooth\n//      modern three.js BufferGeometry.\n//\n//      At one point, three.js included a subdivision surface modifier in the extended examples (see bottom\n//      of file for links), it was removed in r125. The modifier was originally based on the Catmull-Clark\n//      algorithm, which works best for geometry with convex coplanar n-gon faces. In three.js r60 the modifier\n//      was changed to utilize the Loop algorithm. The Loop algorithm was designed to work better with triangle\n//      based meshes.\n//\n//      The Loop algorithm, however, doesn't always provide uniform results as the vertices are\n//      skewed toward the most used vertex positions. A triangle based box (e.g. BoxGeometry for example) will\n//      tend to favor the corners. To alleviate this issue, this implementation includes an initial pass to split\n//      coplanar faces at their shared edges. It starts by splitting along the longest shared edge first, and then\n//      from that midpoint it splits to any remaining coplanar shared edges.\n//\n//      Also by default, this implementation inserts new uv coordinates, but does not average them using the Loop\n//      algorithm. In some cases (often in flat geometries) this will produce undesired results, a\n//      noticeable tearing will occur. In such cases, try passing 'uvSmooth' as true to enable uv averaging.\n//\n//  Note(s)\n//      - This modifier returns a new BufferGeometry instance, it does not dispose() of the old geometry.\n//\n//      - This modifier returns a NonIndexed geometry. An Indexed geometry can be created by using the\n//        BufferGeometryUtils.mergeVertices() function, see:\n//        https://threejs.org/docs/?q=buffer#examples/en/utils/BufferGeometryUtils.mergeVertices\n//\n//      - This modifier works best with geometry whose triangles share edges AND edge vertices. See diagram below.\n//\n//          OKAY          NOT OKAY\n//            O              O\n//           /|\\            / \\\n//          / | \\          /   \\\n//         /  |  \\        /     \\\n//        O---O---O      O---O---O\n//         \\  |  /        \\  |  /\n//          \\ | /          \\ | /\n//           \\|/            \\|/\n//            O              O\n//\n//  Reference(s)\n//      - Subdivision Surfaces\n//          https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/thesis-10.pdf\n//          https://en.wikipedia.org/wiki/Loop_subdivision_surface\n//          https://cseweb.ucsd.edu/~alchern/teaching/cse167_fa21/6-3Surfaces.pdf\n//\n//      - Original three.js SubdivisionModifier, r124 (Loop)\n//          https://github.com/mrdoob/three.js/blob/r124/examples/jsm/modifiers/SubdivisionModifier.js\n//\n//      - Original three.js SubdivisionModifier, r59 (Catmull-Clark)\n//          https://github.com/mrdoob/three.js/blob/r59/examples/js/modifiers/SubdivisionModifier.js\n//\n/////////////////////////////////////////////////////////////////////////////////////\n\n// import * as THREE from 'three';\n\n///// Constants\n\nconst POSITION_DECIMALS = 2;\n\n///// Local Variables\n\nconst _average = new THREE.Vector3();\nconst _center = new THREE.Vector3();\nconst _midpoint = new THREE.Vector3();\nconst _normal = new THREE.Vector3();\nconst _temp = new THREE.Vector3();\n\nconst _vector0 = new THREE.Vector3(); // .Vector4();\nconst _vector1 = new THREE.Vector3(); // .Vector4();\nconst _vector2 = new THREE.Vector3(); // .Vector4();\nconst _vec0to1 = new THREE.Vector3();\nconst _vec1to2 = new THREE.Vector3();\nconst _vec2to0 = new THREE.Vector3();\n\nconst _position = [\n  new THREE.Vector3(),\n  new THREE.Vector3(),\n  new THREE.Vector3(),\n];\n\nconst _vertex = [\n  new THREE.Vector3(),\n  new THREE.Vector3(),\n  new THREE.Vector3(),\n];\n\nconst _triangle = new THREE.Triangle();\n\n/////////////////////////////////////////////////////////////////////////////////////\n/////   Loop Subdivision Surface\n/////////////////////////////////////////////////////////////////////////////////////\n\n/** Loop subdivision surface modifier for use with modern three.js BufferGeometry */\nclass LoopSubdivision {\n\n  /////////////////////////////////////////////////////////////////////////////////////\n  /////   Modify\n  ////////////////////\n\n  /**\n   * Applies Loop subdivision modifier to geometry\n   *\n   * @param {Object} bufferGeometry - Three.js geometry to be subdivided\n   * @param {Number} iterations - How many times to run subdividion\n   * @param {Object} params - Optional parameters object, see below\n   * @returns {Object} Returns new, subdivided, three.js BufferGeometry object\n   *\n   * Optional Parameters Object\n   * @param {Boolean} split - Should coplanar faces be divided along shared edges before running Loop subdivision?\n   * @param {Boolean} uvSmooth - Should UV values be averaged during subdivision?\n   * @param {Boolean} preserveEdges - Should edges / breaks in geometry be ignored during subdivision?\n   * @param {Boolean} flatOnly - If true, subdivision generates triangles, but does not modify positions\n   * @param {Number} maxTriangles - If geometry contains more than this many triangles, subdivision will not continue\n   */\n  static modify(bufferGeometry, iterations = 1, params = {}) {\n    if (arguments.length > 3) console.warn(`LoopSubdivision.modify() now uses a parameter object. See readme for more info!`);\n\n    if (typeof params !== 'object') params = {};\n\n    ///// Parameters\n    if (params.split === undefined) params.split = true;\n    if (params.uvSmooth === undefined) params.uvSmooth = false;\n    if (params.preserveEdges === undefined) params.preserveEdges = false;\n    if (params.flatOnly === undefined) params.flatOnly = false;\n    if (params.maxTriangles === undefined) params.maxTriangles = Infinity;\n\n    ///// Geometries\n    if (! verifyGeometry(bufferGeometry)) return bufferGeometry;\n    let modifiedGeometry = bufferGeometry.clone();\n\n    ///// Presplit\n    if (params.split) {\n      const splitGeometry = LoopSubdivision.edgeSplit(modifiedGeometry)\n      modifiedGeometry.dispose();\n      modifiedGeometry = splitGeometry;\n    }\n\n    ///// Apply Subdivision\n    for (let i = 0; i < iterations; i++) {\n      let currentTriangles = modifiedGeometry.attributes.position.count / 3;\n      if (currentTriangles < params.maxTriangles) {\n        let subdividedGeometry;\n\n        // Subdivide\n        if (params.flatOnly) {\n          subdividedGeometry = LoopSubdivision.flat(modifiedGeometry);\n        } else {\n          subdividedGeometry = LoopSubdivision.smooth(modifiedGeometry, params);\n        }\n\n        // Copy and Resize Groups\n        modifiedGeometry.groups.forEach((group) => {\n          subdividedGeometry.addGroup(group.start * 4, group.count * 4, group.materialIndex);\n        });\n\n        // Clean Up\n        modifiedGeometry.dispose();\n        modifiedGeometry = subdividedGeometry;\n      }\n    }\n\n    ///// Return New Geometry\n    return modifiedGeometry;\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////\n  /////   Split Hypotenuse\n  ////////////////////\n\n  /**\n   * Applies one iteration of split subdivision. Splits all triangles at edges shared by coplanar triangles.\n   * Starts by splitting at longest shared edge, followed by splitting from that new center edge point to the\n   * center of any other shared edges.\n   */\n  static edgeSplit(geometry) {\n\n    ///// Geometries\n    if (! verifyGeometry(geometry)) return geometry;\n    const existing = (geometry.index !== null) ? geometry.toNonIndexed() : geometry.clone();\n    const split = new THREE.BufferGeometry();\n\n    ///// Attributes\n    const attributeList = gatherAttributes(existing);\n    const vertexCount = existing.attributes.position.count;\n    const posAttribute = existing.getAttribute('position');\n    const norAttribute = existing.getAttribute('normal');\n    const edgeHashToTriangle = {};\n    const triangleEdgeHashes = [];\n    const edgeLength = {};\n    const triangleExist = [];\n\n    ///// Edges\n    for (let i = 0; i < vertexCount; i += 3) {\n\n      // Positions\n      _vector0.fromBufferAttribute(posAttribute, i + 0);\n      _vector1.fromBufferAttribute(posAttribute, i + 1);\n      _vector2.fromBufferAttribute(posAttribute, i + 2);\n      _normal.fromBufferAttribute(norAttribute, i);\n      const vecHash0 = hashFromVector(_vector0);\n      const vecHash1 = hashFromVector(_vector1);\n      const vecHash2 = hashFromVector(_vector2);\n\n      // Verify Area\n      const triangleSize = _triangle.set(_vector0, _vector1, _vector2).getArea();\n      triangleExist.push(! fuzzy(triangleSize, 0));\n      if (! triangleExist[i / 3]) {\n        triangleEdgeHashes.push([]);\n        continue;\n      }\n\n      // Calculate Normals\n      calcNormal(_normal, _vector0, _vector1, _vector2);\n      const normalHash = hashFromVector(_normal);\n\n      // Vertex Hashes\n      const hashes = [\n        `${vecHash0}_${vecHash1}_${normalHash}`, // [0]: 0to1\n        `${vecHash1}_${vecHash0}_${normalHash}`, // [1]: 1to0\n        `${vecHash1}_${vecHash2}_${normalHash}`, // [2]: 1to2\n        `${vecHash2}_${vecHash1}_${normalHash}`, // [3]: 2to1\n        `${vecHash2}_${vecHash0}_${normalHash}`, // [4]: 2to0\n        `${vecHash0}_${vecHash2}_${normalHash}`, // [5]: 0to2\n      ];\n\n      // Store Edge Hashes\n      const index = i / 3;\n      for (let j = 0; j < hashes.length; j++) {\n        // Attach Triangle Index to Edge Hash\n        if (! edgeHashToTriangle[hashes[j]]) edgeHashToTriangle[hashes[j]] = [];\n        edgeHashToTriangle[hashes[j]].push(index);\n\n        // Edge Length\n        if (! edgeLength[hashes[j]]) {\n          if (j === 0 || j === 1) edgeLength[hashes[j]] = _vector0.distanceTo(_vector1);\n          if (j === 2 || j === 3) edgeLength[hashes[j]] = _vector1.distanceTo(_vector2);\n          if (j === 4 || j === 5) edgeLength[hashes[j]] = _vector2.distanceTo(_vector0);\n        }\n      }\n\n      // Triangle Edge Reference\n      triangleEdgeHashes.push([ hashes[0], hashes[2], hashes[4] ]);\n    }\n\n    ///// Build Geometry, Set Attributes\n    attributeList.forEach((attributeName) => {\n      const attribute = existing.getAttribute(attributeName);\n      if (! attribute) return;\n      const floatArray = splitAttribute(attribute, attributeName);\n      split.setAttribute(attributeName, new THREE.BufferAttribute(floatArray, attribute.itemSize));\n    });\n\n    ///// Morph Attributes\n    const morphAttributes = existing.morphAttributes;\n    for (const attributeName in morphAttributes) {\n      const array = [];\n      const morphAttribute = morphAttributes[attributeName];\n\n      // Process Array of Float32BufferAttributes\n      for (let i = 0, l = morphAttribute.length; i < l; i++) {\n        if (morphAttribute[i].count !== vertexCount) continue;\n        const floatArray = splitAttribute(morphAttribute[i], attributeName, true);\n        array.push(new THREE.BufferAttribute(floatArray, morphAttribute[i].itemSize));\n      }\n      split.morphAttributes[attributeName] = array;\n    }\n    split.morphTargetsRelative = existing.morphTargetsRelative;\n\n    // Clean Up, Return New Geometry\n    existing.dispose();\n    return split;\n\n    // Loop Subdivide Function\n    function splitAttribute(attribute, attributeName, morph = false) {\n      const newTriangles = 4; /* maximum number of new triangles */\n      const arrayLength = (vertexCount * attribute.itemSize) * newTriangles;\n      const floatArray = new attribute.array.constructor(arrayLength);\n\n      const processGroups = (attributeName === 'position' && ! morph && existing.groups.length > 0);\n      let groupStart = undefined, groupMaterial = undefined;\n\n      let index = 0;\n      let skipped = 0;\n      let step = attribute.itemSize;\n      for (let i = 0; i < vertexCount; i += 3) {\n\n        // Verify Triangle is Valid\n        if (! triangleExist[i / 3]) {\n          skipped += 3;\n          continue;\n        }\n\n        // Get Triangle Points\n        _vector0.fromBufferAttribute(attribute, i + 0);\n        _vector1.fromBufferAttribute(attribute, i + 1);\n        _vector2.fromBufferAttribute(attribute, i + 2);\n\n        // Check for Shared Edges\n        const existingIndex = i / 3;\n        const edgeHash0to1 = triangleEdgeHashes[existingIndex][0];\n        const edgeHash1to2 = triangleEdgeHashes[existingIndex][1];\n        const edgeHash2to0 = triangleEdgeHashes[existingIndex][2];\n\n        const edgeCount0to1 = edgeHashToTriangle[edgeHash0to1].length;\n        const edgeCount1to2 = edgeHashToTriangle[edgeHash1to2].length;\n        const edgeCount2to0 = edgeHashToTriangle[edgeHash2to0].length;\n        const sharedCount = (edgeCount0to1 + edgeCount1to2 + edgeCount2to0) - 3;\n\n        // New Index (Before New Triangles, used for Groups)\n        const loopStartIndex = ((index * 3) / step) / 3;\n\n        // No Shared Edges\n        if (sharedCount === 0) {\n          setTriangle(floatArray, index, step, _vector0, _vector1, _vector2); index += (step * 3);\n\n          // Shared Edges\n        } else {\n          const length0to1 = edgeLength[edgeHash0to1];\n          const length1to2 = edgeLength[edgeHash1to2];\n          const length2to0 = edgeLength[edgeHash2to0];\n\n          // Add New Triangle Positions\n          if ((length0to1 > length1to2 || edgeCount1to2 <= 1) &&\n              (length0to1 > length2to0 || edgeCount2to0 <= 1) && edgeCount0to1 > 1) {\n            _center.copy(_vector0).add(_vector1).divideScalar(2.0);\n            if (edgeCount2to0 > 1) {\n              _midpoint.copy(_vector2).add(_vector0).divideScalar(2.0);\n              setTriangle(floatArray, index, step, _vector0, _center, _midpoint); index += (step * 3);\n              setTriangle(floatArray, index, step, _center, _vector2, _midpoint); index += (step * 3);\n            } else {\n              setTriangle(floatArray, index, step, _vector0, _center, _vector2); index += (step * 3);\n            }\n            if (edgeCount1to2 > 1) {\n              _midpoint.copy(_vector1).add(_vector2).divideScalar(2.0);\n              setTriangle(floatArray, index, step, _center, _vector1, _midpoint); index += (step * 3);\n              setTriangle(floatArray, index, step, _midpoint, _vector2, _center); index += (step * 3);\n            } else {\n              setTriangle(floatArray, index, step, _vector1, _vector2, _center); index += (step * 3);\n            }\n\n          } else if ((length1to2 > length2to0 || edgeCount2to0 <= 1) && edgeCount1to2 > 1) {\n            _center.copy(_vector1).add(_vector2).divideScalar(2.0);\n            if (edgeCount0to1 > 1) {\n              _midpoint.copy(_vector0).add(_vector1).divideScalar(2.0);\n              setTriangle(floatArray, index, step, _center, _midpoint, _vector1); index += (step * 3);\n              setTriangle(floatArray, index, step, _midpoint, _center, _vector0); index += (step * 3);\n            } else {\n              setTriangle(floatArray, index, step, _vector1, _center, _vector0); index += (step * 3);\n            }\n            if (edgeCount2to0 > 1) {\n              _midpoint.copy(_vector2).add(_vector0).divideScalar(2.0);\n              setTriangle(floatArray, index, step, _center, _vector2, _midpoint); index += (step * 3);\n              setTriangle(floatArray, index, step, _midpoint, _vector0, _center); index += (step * 3);\n            } else {\n              setTriangle(floatArray, index, step, _vector2, _vector0, _center); index += (step * 3);\n            }\n\n          } else if (edgeCount2to0 > 1) {\n            _center.copy(_vector2).add(_vector0).divideScalar(2.0);\n            if (edgeCount1to2 > 1) {\n              _midpoint.copy(_vector1).add(_vector2).divideScalar(2.0);\n              setTriangle(floatArray, index, step, _vector2, _center, _midpoint); index += (step * 3);\n              setTriangle(floatArray, index, step, _center, _vector1, _midpoint); index += (step * 3);\n            } else {\n              setTriangle(floatArray, index, step, _vector2, _center, _vector1); index += (step * 3);\n            }\n            if (edgeCount0to1 > 1) {\n              _midpoint.copy(_vector0).add(_vector1).divideScalar(2.0);\n              setTriangle(floatArray, index, step, _vector0, _midpoint, _center); index += (step * 3);\n              setTriangle(floatArray, index, step, _midpoint, _vector1, _center); index += (step * 3);\n            } else {\n              setTriangle(floatArray, index, step, _vector0, _vector1, _center); index += (step * 3);\n            }\n\n          } else {\n            setTriangle(floatArray, index, step, _vector0, _vector1, _vector2); index += (step * 3);\n          }\n        }\n\n        // Process Groups\n        if (processGroups) {\n          existing.groups.forEach((group) => {\n            if (group.start === (i - skipped)) {\n              if (groupStart !== undefined && groupMaterial !== undefined) {\n                split.addGroup(groupStart, loopStartIndex - groupStart, groupMaterial);\n              }\n              groupStart = loopStartIndex;\n              groupMaterial = group.materialIndex;\n            }\n          });\n        }\n\n        // Reset Skipped Triangle Counter\n        skipped = 0;\n      }\n\n      // Resize Array\n      const reducedCount = (index * 3) / step;\n      const reducedArray = new attribute.array.constructor(reducedCount);\n      for (let i = 0; i < reducedCount; i++) {\n        reducedArray[i] = floatArray[i];\n      }\n\n      // Final Group\n      if (processGroups && groupStart !== undefined && groupMaterial !== undefined) {\n        split.addGroup(groupStart, (((index * 3) / step) / 3) - groupStart, groupMaterial);\n      }\n\n      return reducedArray;\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////\n  /////   Flat\n  ////////////////////\n\n  /** Applies one iteration of Loop (flat) subdivision (1 triangle split into 4 triangles) */\n  static flat(geometry) {\n\n    ///// Geometries\n    if (! verifyGeometry(geometry)) return geometry;\n    const existing = (geometry.index !== null) ? geometry.toNonIndexed() : geometry.clone();\n    const loop = new THREE.BufferGeometry();\n\n    ///// Attributes\n    const attributeList = gatherAttributes(existing);\n    const vertexCount = existing.attributes.position.count;\n\n    ///// Build Geometry\n    attributeList.forEach((attributeName) => {\n      const attribute = existing.getAttribute(attributeName);\n      if (! attribute) return;\n\n      loop.setAttribute(attributeName, LoopSubdivision.flatAttribute(attribute, vertexCount));\n    });\n\n    ///// Morph Attributes\n    const morphAttributes = existing.morphAttributes;\n    for (const attributeName in morphAttributes) {\n      const array = [];\n      const morphAttribute = morphAttributes[attributeName];\n\n      // Process Array of Float32BufferAttributes\n      for (let i = 0, l = morphAttribute.length; i < l; i++) {\n        if (morphAttribute[i].count !== vertexCount) continue;\n        array.push(LoopSubdivision.flatAttribute(morphAttribute[i], vertexCount));\n      }\n      loop.morphAttributes[attributeName] = array;\n    }\n    loop.morphTargetsRelative = existing.morphTargetsRelative;\n\n    ///// Clean Up\n    existing.dispose();\n    return loop;\n  }\n\n  static flatAttribute(attribute, vertexCount) {\n    const newTriangles = 4;\n    const arrayLength = (vertexCount * attribute.itemSize) * newTriangles;\n    const floatArray = new attribute.array.constructor(arrayLength);\n\n    let index = 0;\n    let step = attribute.itemSize;\n    for (let i = 0; i < vertexCount; i += 3) {\n\n      // Original Vertices\n      _vector0.fromBufferAttribute(attribute, i + 0);\n      _vector1.fromBufferAttribute(attribute, i + 1);\n      _vector2.fromBufferAttribute(attribute, i + 2);\n\n      // Midpoints\n      _vec0to1.copy(_vector0).add(_vector1).divideScalar(2.0);\n      _vec1to2.copy(_vector1).add(_vector2).divideScalar(2.0);\n      _vec2to0.copy(_vector2).add(_vector0).divideScalar(2.0);\n\n      // Add New Triangle Positions\n      setTriangle(floatArray, index, step, _vector0, _vec0to1, _vec2to0); index += (step * 3);\n      setTriangle(floatArray, index, step, _vector1, _vec1to2, _vec0to1); index += (step * 3);\n      setTriangle(floatArray, index, step, _vector2, _vec2to0, _vec1to2); index += (step * 3);\n      setTriangle(floatArray, index, step, _vec0to1, _vec1to2, _vec2to0); index += (step * 3);\n    }\n\n    return new THREE.BufferAttribute(floatArray, attribute.itemSize);\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////\n  /////   Smooth\n  ////////////////////\n\n  /** Applies one iteration of Loop (smooth) subdivision (1 triangle split into 4 triangles) */\n  static smooth(geometry, params = {}) {\n\n    if (typeof params !== 'object') params = {};\n\n    ///// Parameters\n    if (params.uvSmooth === undefined) params.uvSmooth = false;\n    if (params.preserveEdges === undefined) params.preserveEdges = false;\n\n    ///// Geometries\n    if (! verifyGeometry(geometry)) return geometry;\n    const existing = (geometry.index !== null) ? geometry.toNonIndexed() : geometry.clone();\n    const flat = LoopSubdivision.flat(existing);\n    const loop = new THREE.BufferGeometry();\n\n    ///// Attributes\n    const attributeList = gatherAttributes(existing);\n    const vertexCount = existing.attributes.position.count;\n    const posAttribute = existing.getAttribute('position');\n    const flatPosition = flat.getAttribute('position');\n    const hashToIndex = {};             // Position hash mapped to index values of same position\n    const existingNeighbors = {};       // Position hash mapped to existing vertex neighbors\n    const flatOpposites = {};           // Position hash mapped to new edge point opposites\n    const existingEdges = {};\n\n    function addNeighbor(posHash, neighborHash, index) {\n      if (! existingNeighbors[posHash]) existingNeighbors[posHash] = {};\n      if (! existingNeighbors[posHash][neighborHash]) existingNeighbors[posHash][neighborHash] = [];\n      existingNeighbors[posHash][neighborHash].push(index);\n    }\n\n    function addOpposite(posHash, index) {\n      if (! flatOpposites[posHash]) flatOpposites[posHash] = [];\n      flatOpposites[posHash].push(index);\n    }\n\n    function addEdgePoint(posHash, edgeHash) {\n      if (! existingEdges[posHash]) existingEdges[posHash] = new Set();\n      existingEdges[posHash].add(edgeHash);\n    }\n\n    ///// Existing Vertex Hashes\n    for (let i = 0; i < vertexCount; i += 3) {\n      const posHash0 = hashFromVector(_vertex[0].fromBufferAttribute(posAttribute, i + 0));\n      const posHash1 = hashFromVector(_vertex[1].fromBufferAttribute(posAttribute, i + 1));\n      const posHash2 = hashFromVector(_vertex[2].fromBufferAttribute(posAttribute, i + 2));\n\n      // Neighbors (of Existing Geometry)\n      addNeighbor(posHash0, posHash1, i + 1);\n      addNeighbor(posHash0, posHash2, i + 2);\n      addNeighbor(posHash1, posHash0, i + 0);\n      addNeighbor(posHash1, posHash2, i + 2);\n      addNeighbor(posHash2, posHash0, i + 0);\n      addNeighbor(posHash2, posHash1, i + 1);\n\n      // Opposites (of new FlatSubdivided vertices)\n      _vec0to1.copy(_vertex[0]).add(_vertex[1]).divideScalar(2.0);\n      _vec1to2.copy(_vertex[1]).add(_vertex[2]).divideScalar(2.0);\n      _vec2to0.copy(_vertex[2]).add(_vertex[0]).divideScalar(2.0);\n      const hash0to1 = hashFromVector(_vec0to1);\n      const hash1to2 = hashFromVector(_vec1to2);\n      const hash2to0 = hashFromVector(_vec2to0);\n      addOpposite(hash0to1, i + 2);\n      addOpposite(hash1to2, i + 0);\n      addOpposite(hash2to0, i + 1);\n\n      // Track Edges for 'edgePreserve'\n      addEdgePoint(posHash0, hash0to1);\n      addEdgePoint(posHash0, hash2to0);\n      addEdgePoint(posHash1, hash0to1);\n      addEdgePoint(posHash1, hash1to2);\n      addEdgePoint(posHash2, hash1to2);\n      addEdgePoint(posHash2, hash2to0);\n    }\n\n    ///// Flat Position to Index Map\n    for (let i = 0; i < flat.attributes.position.count; i++) {\n      const posHash = hashFromVector(_temp.fromBufferAttribute(flatPosition, i));\n      if (! hashToIndex[posHash]) hashToIndex[posHash] = [];\n      hashToIndex[posHash].push(i);\n    }\n\n    ///// Build Geometry, Set Attributes\n    attributeList.forEach((attributeName) => {\n      const existingAttribute = existing.getAttribute(attributeName);\n      const flatAttribute = flat.getAttribute(attributeName);\n      if (existingAttribute === undefined || flatAttribute === undefined) return;\n\n      const floatArray = subdivideAttribute(attributeName, existingAttribute, flatAttribute);\n      loop.setAttribute(attributeName, new THREE.BufferAttribute(floatArray, flatAttribute.itemSize));\n    });\n\n    ///// Morph Attributes\n    const morphAttributes = existing.morphAttributes;\n    for (const attributeName in morphAttributes) {\n      const array = [];\n      const morphAttribute = morphAttributes[attributeName];\n\n      // Process Array of Float32BufferAttributes\n      for (let i = 0, l = morphAttribute.length; i < l; i++) {\n        if (morphAttribute[i].count !== vertexCount) continue;\n        const existingAttribute = morphAttribute[i];\n        const flatAttribute = LoopSubdivision.flatAttribute(morphAttribute[i], morphAttribute[i].count)\n\n        const floatArray = subdivideAttribute(attributeName, existingAttribute, flatAttribute);\n        array.push(new THREE.BufferAttribute(floatArray, flatAttribute.itemSize));\n      }\n      loop.morphAttributes[attributeName] = array;\n    }\n    loop.morphTargetsRelative = existing.morphTargetsRelative;\n\n    ///// Clean Up\n    flat.dispose();\n    existing.dispose();\n    return loop;\n\n    //////////\n\n    // Loop Subdivide Function\n    function subdivideAttribute(attributeName, existingAttribute, flatAttribute) {\n      const arrayLength = (flat.attributes.position.count * flatAttribute.itemSize);\n      const floatArray = new existingAttribute.array.constructor(arrayLength);\n\n      // Process Triangles\n      let index = 0;\n      for (let i = 0; i < flat.attributes.position.count; i += 3) {\n\n        // Process Triangle Points\n        for (let v = 0; v < 3; v++) {\n\n          if (attributeName === 'uv' && ! params.uvSmooth) {\n\n            _vertex[v].fromBufferAttribute(flatAttribute, i + v);\n\n          } else if (attributeName === 'normal') { // && params.normalSmooth) {\n\n            _position[v].fromBufferAttribute(flatPosition, i + v);\n            const positionHash = hashFromVector(_position[v]);\n            const positions = hashToIndex[positionHash];\n\n            const k = Object.keys(positions).length;\n            const beta = 0.75 / k;\n            const startWeight = 1.0 - (beta * k);\n\n            _vertex[v].fromBufferAttribute(flatAttribute, i + v);\n            _vertex[v].multiplyScalar(startWeight);\n\n            positions.forEach(positionIndex => {\n              _average.fromBufferAttribute(flatAttribute, positionIndex);\n              _average.multiplyScalar(beta);\n              _vertex[v].add(_average);\n            });\n\n\n          } else { // 'position', 'color', etc...\n\n            _vertex[v].fromBufferAttribute(flatAttribute, i + v);\n            _position[v].fromBufferAttribute(flatPosition, i + v);\n\n            const positionHash = hashFromVector(_position[v]);\n            const neighbors = existingNeighbors[positionHash];\n            const opposites = flatOpposites[positionHash];\n\n            ///// Adjust Source Vertex\n            if (neighbors) {\n\n              // Check Edges have even Opposite Points\n              if (params.preserveEdges) {\n                const edgeSet = existingEdges[positionHash];\n                let hasPair = true;\n                for (const edgeHash of edgeSet) {\n                  if (flatOpposites[edgeHash].length % 2 !== 0) hasPair = false;\n                }\n                if (! hasPair) continue;\n              }\n\n              // Number of Neighbors\n              const k = Object.keys(neighbors).length;\n\n              ///// Loop's Formula\n              const beta = 1 / k * ((5/8) - Math.pow((3/8) + (1/4) * Math.cos(2 * Math.PI / k), 2));\n\n              ///// Warren's Formula\n              // const beta = (k > 3) ? 3 / (8 * k) : ((k === 3) ? 3 / 16 : 0);\n\n              ///// Stevinz' Formula\n              // const beta = 0.5 / k;\n\n              ///// Average with Neighbors\n              const startWeight = 1.0 - (beta * k);\n              _vertex[v].multiplyScalar(startWeight);\n\n              for (let neighborHash in neighbors) {\n                const neighborIndices = neighbors[neighborHash];\n\n                _average.set(0, 0, 0);\n                for (let j = 0; j < neighborIndices.length; j++) {\n                  _average.add(_temp.fromBufferAttribute(existingAttribute, neighborIndices[j]));\n                }\n                _average.divideScalar(neighborIndices.length);\n\n                _average.multiplyScalar(beta);\n                _vertex[v].add(_average);\n              }\n\n              ///// Newly Added Edge Vertex\n            } else if (opposites && opposites.length === 2) {\n              const k = opposites.length;\n              const beta = 0.125; /* 1/8 */\n              const startWeight = 1.0 - (beta * k);\n              _vertex[v].multiplyScalar(startWeight);\n\n              opposites.forEach(oppositeIndex => {\n                _average.fromBufferAttribute(existingAttribute, oppositeIndex);\n                _average.multiplyScalar(beta);\n                _vertex[v].add(_average);\n              });\n            }\n          }\n        }\n\n        // Add New Triangle Position\n        setTriangle(floatArray, index, flatAttribute.itemSize, _vertex[0], _vertex[1], _vertex[2]);\n        index += (flatAttribute.itemSize * 3);\n      }\n\n      return floatArray;\n    }\n\n  }\n\n}\n\n/////////////////////////////////////////////////////////////////////////////////////\n/////   Local Functions, Hash\n/////////////////////////////////////////////////////////////////////////////////////\n\nconst _positionShift = Math.pow(10, POSITION_DECIMALS);\n\n/** Compares two numbers to see if they're almost the same */\nfunction fuzzy(a, b, tolerance = 0.00001) {\n  return ((a < (b + tolerance)) && (a > (b - tolerance)));\n}\n\n/** Generates hash strong from Number */\nfunction hashFromNumber(num, shift = _positionShift) {\n  let roundedNumber = round(num * shift);\n  if (roundedNumber == 0) roundedNumber = 0; /* prevent -0 (signed 0 can effect Math.atan2(), etc.) */\n  return `${roundedNumber}`;\n}\n\n/** Generates hash strong from Vector3 */\nfunction hashFromVector(vector, shift = _positionShift) {\n  return `${hashFromNumber(vector.x, shift)},${hashFromNumber(vector.y, shift)},${hashFromNumber(vector.z, shift)}`;\n}\n\nfunction round(x) {\n  return (x + ((x > 0) ? 0.5 : -0.5)) << 0;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////\n/////   Local Functions, Geometry\n/////////////////////////////////////////////////////////////////////////////////////\n\nfunction calcNormal(target, vec1, vec2, vec3) {\n  _temp.subVectors(vec1, vec2);\n  target.subVectors(vec2, vec3);\n  target.cross(_temp).normalize();\n}\n\nfunction gatherAttributes(geometry) {\n  const desired = [ 'position', 'normal', 'uv' ];\n  const contains = Object.keys(geometry.attributes);\n  const attributeList = Array.from(new Set(desired.concat(contains)));\n  return attributeList;\n}\n\nfunction setTriangle(positions, index, step, vec0, vec1, vec2) {\n  if (step >= 1) {\n    positions[index + 0 + (step * 0)] = vec0.x;\n    positions[index + 0 + (step * 1)] = vec1.x;\n    positions[index + 0 + (step * 2)] = vec2.x;\n  }\n  if (step >= 2) {\n    positions[index + 1 + (step * 0)] = vec0.y;\n    positions[index + 1 + (step * 1)] = vec1.y;\n    positions[index + 1 + (step * 2)] = vec2.y;\n  }\n  if (step >= 3) {\n    positions[index + 2 + (step * 0)] = vec0.z;\n    positions[index + 2 + (step * 1)] = vec1.z;\n    positions[index + 2 + (step * 2)] = vec2.z;\n  }\n  if (step >= 4) {\n    positions[index + 3 + (step * 0)] = vec0.w;\n    positions[index + 3 + (step * 1)] = vec1.w;\n    positions[index + 3 + (step * 2)] = vec2.w;\n  }\n}\n\nfunction verifyGeometry(geometry) {\n  if (geometry === undefined) {\n    console.warn(`LoopSubdivision: Geometry provided is undefined`);\n    return false;\n  }\n\n  if (! geometry.isBufferGeometry) {\n    console.warn(`LoopSubdivision: Geometry provided is not 'BufferGeometry' type`);\n    return false;\n  }\n\n  if (geometry.attributes.position === undefined) {\n    console.warn(`LoopSubdivision: Geometry provided missing required 'position' attribute`);\n    return false;\n  }\n\n  if (geometry.attributes.normal === undefined) {\n    geometry.computeVertexNormals();\n  }\n  return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/LoopSubdivision.mjs\n");

/***/ }),

/***/ "./src/glow.mjs":
/*!**********************!*\
  !*** ./src/glow.mjs ***!
  \**********************/
/*! no exports provided */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _LoopSubdivision_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LoopSubdivision.mjs */ \"./src/LoopSubdivision.mjs\");\n\n\nAFRAME.registerComponent('glow', {\n  schema: {\n    enabled: {default: true},\n    c: {type: 'number', default: 1 },\n    p: {type: 'number', default: 1.4 },\n    color: {type: 'color', default: '#FFFF00'},\n    scale: {type: 'number', default: 2 },\n    side: {type: 'string', default: \"front\" },\n  },\n  init: function () {\n\t\tconst that = this;\n\t\tconst run = function () {\n\t\t\tconst camera = document.querySelector('[camera]').object3D;\n\t\t\tthat.camera = camera;\n\n\t\t\tlet sideRender = THREE.FrontSide;\n\t\t\tif (that.data.side === \"back\") {\n\t\t\t\tsideRender = THREE.BackSide;\n\t\t\t}\n\n\t\t\t// Setup shader\n\t\t\tthat.glowMaterial = new THREE.ShaderMaterial({\n\t\t\t\tuniforms: {\n\t\t\t\t\t\"c\": {type: \"f\", value: that.data.c},\n\t\t\t\t\t\"p\": {type: \"f\", value: that.data.p},\n\t\t\t\t\tglowColor: {type: \"c\", value: new THREE.Color(that.data.color)},\n\t\t\t\t\tviewVector: {type: \"v3\", value: camera.position}\n\t\t\t\t},\n\t\t\t\tvertexShader: THREE.__GlowShader.vertexShader,\n\t\t\t\tfragmentShader: THREE.__GlowShader.fragmentShader,\n\t\t\t\tside: sideRender,\n\t\t\t\tblending: THREE.AdditiveBlending,\n\t\t\t\ttransparent: true\n\t\t\t});\n\n\t\t\tconst geometry = _LoopSubdivision_mjs__WEBPACK_IMPORTED_MODULE_0__[\"LoopSubdivision\"].modify(that.el.object3DMap.mesh.geometry, 2, {});\n\n\t\t\t// ISSUE for OBJs: >> line below\n\t\t\t// let object = that.el.object3DMap.mesh.geometry.clone();\n\t\t\t// object = new THREE.Geometry().fromBufferGeometry(object);\n\t\t\t// const modifier = new THREE.BufferSubdivisionModifier(2);\n\t\t\t// object = modifier.modify(object);\n\n\t\t\tthat.glowMesh = new THREE.Mesh(geometry, that.glowMaterial);\n\t\t\tthat.el.object3D.add(that.glowMesh);\n\n\t\t\tif (!that.data.enabled) {\n\t\t\t\tthat.glowMesh.visible = false;\n\t\t\t}\n\t\t};\n\n\t\t// Make sure the entity has a mesh, otherwise wait for the 3D model to be loaded..\n    function waitForEntityLoad() {\n      if (that.el.object3DMap.mesh) { return run() }\n      that.el.addEventListener('model-loaded', run);\n    }\n\n    // Make sure the scene has been loaded..\n    if (this.el.sceneEl.hasLoaded) { return waitForEntityLoad(); }\n    this.el.sceneEl.addEventListener('loaded', waitForEntityLoad);\n  },\n  update: function () {\n    if (this.data.enabled) {\n      if (this.glowMesh) {\n        this.glowMesh.visible = true;\n\n        if (this.data.c < 0) { this.data.c = 0; }\n        if (this.data.c > 1) { this.data.c = 1; }\n        if (this.data.p < 0) { this.data.p = 0; }\n        if (this.data.p > 6) { this.data.p = 6; }\n\n        this.glowMesh.material.uniforms[ \"c\" ].value = this.data.c;\n        this.glowMesh.material.uniforms[ \"p\" ].value = this.data.p;\n        this.glowMesh.material.uniforms.glowColor.value.setHex( this.data.color.replace(\"#\", \"0x\"));\n\n\t\t\t\tlet sideRender = THREE.FrontSide;\n\t\t\t\tif (this.data.side === \"back\") {\n          sideRender = THREE.BackSide;\n        }\n        this.glowMesh.material.side = sideRender;\n      }\n    } else if (this.glowMesh) {\n      this.glowMesh.visible = false;\n    }\n  },\n  tick: function () {\n    if (this.glowMesh) {\n      this.glowMesh.rotation.set(this.el.object3D.rotation.x, this.el.object3D.rotation.y, this.el.object3D.rotation.z);\n      this.glowMesh.scale.set(this.el.object3D.scale.x*this.data.scale, this.el.object3D.scale.y*this.data.scale, this.el.object3D.scale.z*this.data.scale);\n      if (!this.camera) { return; }\n      this.glowMesh.material.uniforms.viewVector.value =\n    \t\tnew THREE.Vector3().subVectors( this.camera.position, this.glowMesh.position );\n    }\n  },\n  remove: function () {\n    if (!this.glowMesh) { return; }\n\t\tconst scene = this.el.sceneEl.object3D;\n\t\tscene.remove( this.glowMesh );\n    this.glowMesh = null;\n    this.glowMaterial = null;\n  },\n  pause: function () {},\n  play: function () {}\n});\n\n\nTHREE.__GlowShader = {\n\n\tvertexShader: [\n\n    \"uniform vec3 viewVector;\",\n    \"uniform float c;\",\n    \"uniform float p;\",\n    \"varying float intensity;\",\n    \"void main() \",\n    \"{\",\n      \"vec3 vNormal = normalize( normalMatrix * normal );\",\n    \t\"vec3 vNormel = normalize( normalMatrix * viewVector );\",\n    \t\"intensity = pow( c - dot(vNormal, vNormel), p );\",\n\n      \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n\n\t].join(\"\\n\"),\n\n\tfragmentShader: [\n\n\t\t\"uniform vec3 glowColor;\",\n    \"varying float intensity;\",\n    \"void main() \",\n    \"{\",\n    \t\"vec3 glow = glowColor * intensity;\",\n      \"gl_FragColor = vec4( glow, 1.0 );\",\n    \"}\"\n\n\t].join(\"\\n\")\n\n};\n\n\n\n\n/*\n * @author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\n * @author Matthew Adams / http://www.centerionware.com - added UV support and rewrote to use buffergeometry.\n *\n * Subdivision Geometry Modifier using Loop Subdivision Scheme for Geometry / BufferGeometry\n *\n * References:\n *\thttp://graphics.stanford.edu/~mdfisher/subdivision.html\n *\thttp://www.holmes3d.net/graphics/subdivision/\n *\thttp://www.cs.rutgers.edu/~decarlo/readings/subdiv-sg00c.pdf\n *\n * Known Issues:\n *\t- currently doesn't handle \"Sharp Edges\"\n *\t- no checks to prevent breaking when uv's don't exist.\n *\t- vertex colors are unsupported.\n *\t**DDS Images when using corrected uv's passed to subdivision modifier will have their uv's flipy'd within the correct uv set\n *\t**Either flipy the DDS image, or use shaders. Don't try correcting the uv's before passing into subdiv (eg: v=1-v).\n *\n * @input THREE.Geometry, or index'd THREE.BufferGeometry with faceUV's (Not vertex uv's)\n * @output non-indexed vertex points, uv's, normals.\n *\n * The TypedArrayHelper class is designed to assist managing typed arrays, and to allow the removal of all 'new Vector3, new Face3, new Vector2'.\n *\n * It will automatically resize them if trying to push a new element to an array that isn't long enough\n * It provides 'registers' that the units can be mapped to. This allows a small set of objects\n * (ex: vector3's, face3's, vector2's) to be allocated then used, to eliminate any need to rewrite all\n * the features those classes offer while not requiring some_huge_number to be allocated.\n * It should be moved into it's own file honestly, then included before the BufferSubdivisionModifier - maybe in three's core?\n *\n */\n\nvar TypedArrayHelper = function( size, registers, register_type, array_type, unit_size, accessors ) {\n\n\tthis.array_type = array_type;\n\tthis.register_type = register_type;\n\tthis.unit_size = unit_size;\n\tthis.accessors = accessors;\n\tthis.buffer = new array_type( size * unit_size );\n\tthis.register = [];\n\tthis.length = 0;\n\tthis.real_length = size;\n\tthis.available_registers = registers;\n\n\tfor ( var i = 0; i < registers; i++ ) {\n\n\t\tthis.register.push( new register_type() );\n\n\t}\n\n};\n\nTypedArrayHelper.prototype = {\n\n\tconstructor: TypedArrayHelper,\n\n\tindex_to_register: function( index, register, isLoop ) {\n\n\t\tvar base = index * this.unit_size;\n\n\t\tif ( register >= this.available_registers ) {\n\n\t\t\tthrow new Error( 'THREE.BufferSubdivisionModifier: Not enough registers in TypedArrayHelper.' );\n\n\t\t}\n\n\t\tif ( index > this.length ) {\n\n\t\t\tthrow new Error( 'THREE.BufferSubdivisionModifier: Index is out of range in TypedArrayHelper.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.unit_size; i++ ) {\n\n\t\t\t( this.register[ register ] )[ this.accessors[ i ] ] = this.buffer[ base + i ];\n\n\t\t}\n\n\t},\n\n\tresize: function( new_size ) {\n\n\t\tif ( new_size === 0 ) {\n\n\t\t\tnew_size = 8;\n\n\t\t}\n\n\t\tif ( new_size < this.length ) {\n\n\t\t\tthis.buffer = this.buffer.subarray( 0, this.length * this.unit_size );\n\n\t\t} else {\n\n\t\t\tvar nBuffer;\n\n\t\t\tif ( this.buffer.length < new_size * this.unit_size ) {\n\n\t\t\t\tnBuffer = new this.array_type( new_size * this.unit_size );\n\t\t\t\tnBuffer.set( this.buffer );\n\t\t\t\tthis.buffer = nBuffer;\n\t\t\t\tthis.real_length = new_size;\n\n\t\t\t} else {\n\n\t\t\t\tnBuffer = new this.array_type( new_size * this.unit_size );\n\t\t\t\tnBuffer.set( this.buffer.subarray( 0, this.length * this.unit_size ) );\n\t\t\t\tthis.buffer = nBuffer;\n\t\t\t\tthis.real_length = new_size;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tfrom_existing: function( oldArray ) {\n\n\t\tvar new_size = oldArray.length;\n\t\tthis.buffer = new this.array_type( new_size );\n\t\tthis.buffer.set( oldArray );\n\t\tthis.length = oldArray.length / this.unit_size;\n\t\tthis.real_length = this.length;\n\n\t},\n\n\tpush_element: function( vector ) {\n\n\t\tif ( this.length + 1 > this.real_length ) {\n\n\t\t\tthis.resize( this.real_length * 2 );\n\n\t\t}\n\n\t\tvar bpos = this.length * this.unit_size;\n\n\t\tfor ( var i = 0; i < this.unit_size; i++ ) {\n\n\t\t\tthis.buffer[ bpos + i ] = vector[ this.accessors[ i ] ];\n\n\t\t}\n\n\t\tthis.length++;\n\n\t},\n\n\ttrim_size: function() {\n\n\t\tif ( this.length < this.real_length ) {\n\n\t\t\tthis.resize( this.length );\n\n\t\t}\n\n\t}\n\n};\n\n\n// function convertGeometryToIndexedBuffer( geometry ) {\n//\n// \tvar BGeom = new THREE.BufferGeometry();\n//\n// \t// create a new typed array\n// \tvar vertArray = new TypedArrayHelper( geometry.vertices.length, 0, THREE.Vector3, Float32Array, 3, [ 'x', 'y', 'z' ] );\n// \tvar indexArray = new TypedArrayHelper( geometry.faces.length, 0, THREE.Face3, Uint32Array, 3, [ 'a', 'b', 'c' ] );\n// \tvar uvArray = new TypedArrayHelper( geometry.faceVertexUvs[0].length * 3 * 3, 0, THREE.Vector2, Float32Array, 2, [ 'x', 'y' ] );\n//\n// \tfor ( var i = 0, il = geometry.vertices.length; i < il; i++ ) {\n//\n// \t\tvertArray.push_element( geometry.vertices[ i ] );\n//\n// \t}\n//\n// \tfor ( var i = 0, il = geometry.faces.length; i < il; i++ ) {\n//\n// \t\tindexArray.push_element( geometry.faces[ i ] );\n//\n// \t}\n//\n// \tfor ( var i = 0, il = geometry.faceVertexUvs[ 0 ].length; i < il; i++ ) {\n//\n// \t\tuvArray.push_element( geometry.faceVertexUvs[ 0 ][ i ][ 0 ] );\n// \t\tuvArray.push_element( geometry.faceVertexUvs[ 0 ][ i ][ 1 ] );\n// \t\tuvArray.push_element( geometry.faceVertexUvs[ 0 ][ i ][ 2 ] );\n//\n// \t}\n//\n// \tindexArray.trim_size();\n// \tvertArray.trim_size();\n// \tuvArray.trim_size();\n//\n// \tBGeom.setIndex( new THREE.BufferAttribute( indexArray.buffer, 3 ) );\n// \tBGeom.addAttribute( 'position', new THREE.BufferAttribute( vertArray.buffer, 3 ) );\n// \tBGeom.addAttribute( 'uv', new THREE.BufferAttribute( uvArray.buffer, 2 ) );\n//\n// \treturn BGeom;\n//\n// }\n\nfunction compute_vertex_normals( geometry ) {\n\n\tvar ABC = [ 'a', 'b', 'c' ];\n\tvar XYZ = [ 'x', 'y', 'z' ];\n\tvar XY = [ 'x', 'y' ];\n\n\tvar oldVertices = new TypedArrayHelper( 0, 5, THREE.Vector3, Float32Array, 3, XYZ );\n\tvar oldFaces = new TypedArrayHelper( 0, 3, THREE.Face3, Uint32Array, 3, ABC );\n\toldVertices.from_existing( geometry.getAttribute( 'position' ).array );\n\tvar newNormals = new TypedArrayHelper( oldVertices.length * 3, 4, THREE.Vector3, Float32Array, 3, XYZ );\n\tvar newNormalFaces = new TypedArrayHelper( oldVertices.length, 1, function () { this.x = 0; }, Float32Array, 1, [ 'x' ] );\n\n\tnewNormals.length = oldVertices.length;\n\toldFaces.from_existing( geometry.index.array );\n\tvar a, b, c;\n\tvar my_weight;\n\tvar full_weights = [ 0.0, 0.0, 0.0 ];\n\n\tfor ( var i = 0, il = oldFaces.length; i < il; i++ ) {\n\n\t\toldFaces.index_to_register( i, 0 );\n\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].a, 0 );\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].b, 1 );\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].c, 2 );\n\n\t\tnewNormals.register[ 0 ].subVectors( oldVertices.register[ 1 ], oldVertices.register[ 0 ] );\n\t\tnewNormals.register[ 1 ].subVectors( oldVertices.register[ 2 ], oldVertices.register[ 1 ] );\n\t\tnewNormals.register[ 0 ].cross( newNormals.register[ 1 ] );\n\t\tmy_weight = Math.abs( newNormals.register[ 0 ].length() );\n\n\t\tnewNormalFaces.buffer[ oldFaces.register[ 0 ].a ] += my_weight;\n\t\tnewNormalFaces.buffer[ oldFaces.register[ 0 ].b ] += my_weight;\n\t\tnewNormalFaces.buffer[ oldFaces.register[ 0 ].c ] += my_weight;\n\n\t}\n\n\tvar t_len;\n\n\tfor ( var i = 0, il = oldFaces.length; i < il; i++ ) {\n\n\t\toldFaces.index_to_register( i, 0 );\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].a, 0 );\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].b, 1 );\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].c, 2 );\n\n\t\tnewNormals.register[ 0 ].subVectors( oldVertices.register[ 1 ], oldVertices.register[ 0 ] );\n\t\tnewNormals.register[ 1 ].subVectors( oldVertices.register[ 2 ], oldVertices.register[ 0 ] );\n\n\t\tnewNormals.register[ 3 ].set( 0, 0, 0 );\n\t\tnewNormals.register[ 3 ].x = ( newNormals.register[ 0 ].y * newNormals.register[ 1 ].z ) - ( newNormals.register[ 0 ].z * newNormals.register[ 1 ].y );\n\t\tnewNormals.register[ 3 ].y = ( newNormals.register[ 0 ].z * newNormals.register[ 1 ].x ) - ( newNormals.register[ 0 ].x * newNormals.register[ 1 ].z );\n\t\tnewNormals.register[ 3 ].z = ( newNormals.register[ 0 ].x * newNormals.register[ 1 ].y ) - ( newNormals.register[ 0 ].y * newNormals.register[ 1 ].x );\n\n\t\tnewNormals.register[ 0 ].cross( newNormals.register[ 1 ] );\n\n\t\tmy_weight = Math.abs( newNormals.register[ 0 ].length() );\n\n\t\tfull_weights[ 0 ] = ( my_weight / newNormalFaces.buffer[ oldFaces.register[ 0 ].a ] );\n\t\tfull_weights[ 1 ] = ( my_weight / newNormalFaces.buffer[ oldFaces.register[ 0 ].b ] );\n\t\tfull_weights[ 2 ] = ( my_weight / newNormalFaces.buffer[ oldFaces.register[ 0 ].c ] );\n\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].a * 3 ) + 0 ] += newNormals.register[ 3 ].x * full_weights[ 0 ];\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].a * 3 ) + 1 ] += newNormals.register[ 3 ].y * full_weights[ 0 ];\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].a * 3 ) + 2 ] += newNormals.register[ 3 ].z * full_weights[ 0 ];\n\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].b * 3 ) + 0 ] += newNormals.register[ 3 ].x * full_weights[ 1 ];\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].b * 3 ) + 1 ] += newNormals.register[ 3 ].y * full_weights[ 1 ];\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].b * 3 ) + 2 ] += newNormals.register[ 3 ].z * full_weights[ 1 ];\n\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].c * 3 ) + 0 ] += newNormals.register[ 3 ].x * full_weights[ 2 ];\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].c * 3 ) + 1 ] += newNormals.register[ 3 ].y * full_weights[ 2 ];\n\t\tnewNormals.buffer[ ( oldFaces.register[ 0 ].c * 3 ) + 2 ] += newNormals.register[ 3 ].z * full_weights[ 2 ];\n\n\t}\n\n\tnewNormals.trim_size();\n\tgeometry.addAttribute( 'normal', new THREE.BufferAttribute( newNormals.buffer, 3 ) );\n\n}\n\nfunction unIndexIndexedGeometry( geometry ) {\n\n\tvar ABC = [ 'a', 'b', 'c' ];\n\tvar XYZ = [ 'x', 'y', 'z' ];\n\tvar XY = [ 'x', 'y' ];\n\n\tvar oldVertices = new TypedArrayHelper( 0, 3, THREE.Vector3, Float32Array, 3, XYZ );\n\tvar oldFaces = new TypedArrayHelper( 0, 3, THREE.Face3, Uint32Array, 3, ABC );\n\tvar oldUvs = new TypedArrayHelper( 0, 3, THREE.Vector2, Float32Array, 2, XY );\n\tvar oldNormals = new TypedArrayHelper( 0, 3, THREE.Vector3, Float32Array, 3, XYZ );\n\n\toldVertices.from_existing( geometry.getAttribute( 'position' ).array );\n\toldFaces.from_existing( geometry.index.array );\n\toldUvs.from_existing( geometry.getAttribute( 'uv' ).array );\n\n\tcompute_vertex_normals( geometry );\n\toldNormals.from_existing( geometry.getAttribute( 'normal' ).array );\n\n\tvar newVertices = new TypedArrayHelper( oldFaces.length * 3, 3, THREE.Vector3, Float32Array, 3, XYZ );\n\tvar newNormals = new TypedArrayHelper( oldFaces.length * 3, 3, THREE.Vector3, Float32Array, 3, XYZ );\n\tvar newUvs = new TypedArrayHelper( oldFaces.length * 3, 3, THREE.Vector2, Float32Array, 2, XY );\n\tvar v, w;\n\n\tfor ( var i = 0, il = oldFaces.length; i < il; i++ ) {\n\n\t\toldFaces.index_to_register( i, 0 );\n\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].a, 0 );\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].b, 1 );\n\t\toldVertices.index_to_register( oldFaces.register[ 0 ].c, 2 );\n\n\t\tnewVertices.push_element( oldVertices.register[ 0 ] );\n\t\tnewVertices.push_element( oldVertices.register[ 1 ] );\n\t\tnewVertices.push_element( oldVertices.register[ 2 ] );\n\n\t\t\tif ( oldUvs.length !== 0 ) {\n\n\t\t\t\toldUvs.index_to_register( ( i * 3 ) + 0, 0 );\n\t\t\t\toldUvs.index_to_register( ( i * 3 ) + 1, 1 );\n\t\t\t\toldUvs.index_to_register( ( i * 3 ) + 2, 2 );\n\n\t\t\t\tnewUvs.push_element( oldUvs.register[ 0 ] );\n\t\t\t\tnewUvs.push_element( oldUvs.register[ 1 ] );\n\t\t\t\tnewUvs.push_element( oldUvs.register[ 2 ] );\n\n\t\t\t}\n\n\t\toldNormals.index_to_register( oldFaces.register[ 0 ].a, 0 );\n\t\toldNormals.index_to_register( oldFaces.register[ 0 ].b, 1 );\n\t\toldNormals.index_to_register( oldFaces.register[ 0 ].c, 2 );\n\n\t\tnewNormals.push_element( oldNormals.register[ 0 ] );\n\t\tnewNormals.push_element( oldNormals.register[ 1 ] );\n\t\tnewNormals.push_element( oldNormals.register[ 2 ] );\n\n\t}\n\n\tnewVertices.trim_size();\n\tnewUvs.trim_size();\n\tnewNormals.trim_size();\n\n\tgeometry.index = null;\n\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( newVertices.buffer, 3 ) );\n\tgeometry.addAttribute( 'normal', new THREE.BufferAttribute( newNormals.buffer, 3 ) );\n\n\tif ( newUvs.length !== 0 ) {\n\n\t\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( newUvs.buffer, 2 ) );\n\n\t}\n\n\treturn geometry;\n\n}\n\nTHREE.BufferSubdivisionModifier = function( subdivisions ) {\n\n\tthis.subdivisions = ( subdivisions === undefined ) ? 1 : subdivisions;\n\n};\n\nTHREE.BufferSubdivisionModifier.prototype.modify = function( geometry ) {\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\tgeometry.mergeVertices();\n\n\t\tif ( typeof geometry.normals === 'undefined' ) {\n\n\t\t\tgeometry.normals = [];\n\n\t\t}\n\n\t\tgeometry = convertGeometryToIndexedBuffer( geometry );\n\n\t} else if ( !( geometry instanceof THREE.BufferGeometry ) ) {\n\n\t\tconsole.error( 'THREE.BufferSubdivisionModifier: Geometry is not an instance of THREE.BufferGeometry or THREE.Geometry' );\n\n\t}\n\n\tvar repeats = this.subdivisions;\n\n\twhile ( repeats -- > 0 ) {\n\n\t\tthis.smooth( geometry );\n\n\t}\n\n\treturn unIndexIndexedGeometry( geometry );\n\n};\n\nvar edge_type = function ( a, b ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.faces = [];\n\tthis.newEdge = null;\n\n};\n\n( function () {\n\n\t// Some constants\n\tvar ABC = [ 'a', 'b', 'c' ];\n\tvar XYZ = [ 'x', 'y', 'z' ];\n\tvar XY = [ 'x', 'y' ];\n\n\tfunction getEdge( a, b, map ) {\n\n\t\tvar key = Math.min( a, b ) + '_' + Math.max( a, b );\n\t\treturn map[ key ];\n\n\t}\n\n\n\tfunction processEdge( a, b, vertices, map, face, metaVertices ) {\n\n\t\tvar vertexIndexA = Math.min( a, b );\n\t\tvar vertexIndexB = Math.max( a, b );\n\n\t\tvar key = vertexIndexA + '_' + vertexIndexB;\n\n\t\tvar edge;\n\n\t\tif ( key in map ) {\n\n\t\t\tedge = map[ key ];\n\n\t\t} else {\n\n\t\t\tedge = new edge_type( vertexIndexA,vertexIndexB );\n\t\t\tmap[key] = edge;\n\n\t\t}\n\n\t\tedge.faces.push( face );\n\n\t\tmetaVertices[ a ].edges.push( edge );\n\t\tmetaVertices[ b ].edges.push( edge );\n\n\t}\n\n\tfunction generateLookups( vertices, faces, metaVertices, edges ) {\n\n\t\tvar i, il, face, edge;\n\n\t\tfor ( i = 0, il = vertices.length; i < il; i++ ) {\n\n\t\t\tmetaVertices[ i ] = { edges: [] };\n\n\t\t}\n\n\t\tfor ( i = 0, il = faces.length; i < il; i++ ) {\n\n\t\t\tfaces.index_to_register( i, 0 );\n\t\t\tface = faces.register[ 0 ]; // Faces is now a TypedArrayHelper class, not a face3.\n\n\t\t\tprocessEdge( face.a, face.b, vertices, edges, i, metaVertices );\n\t\t\tprocessEdge( face.b, face.c, vertices, edges, i, metaVertices );\n\t\t\tprocessEdge( face.c, face.a, vertices, edges, i, metaVertices );\n\n\t\t}\n\n\t}\n\n\tfunction newFace( newFaces, face ) {\n\n\t\tnewFaces.push_element( face );\n\n\t}\n\n\tfunction midpoint( a, b ) {\n\n\t\treturn ( Math.abs( b - a ) / 2 ) + Math.min( a, b );\n\n\t}\n\n\tfunction newUv( newUvs, a, b, c ) {\n\n\t\tnewUvs.push_element( a );\n\t\tnewUvs.push_element( b );\n\t\tnewUvs.push_element( c );\n\n\t}\n\n\t/////////////////////////////\n\n\t// Performs one iteration of Subdivision\n\n\tTHREE.BufferSubdivisionModifier.prototype.smooth = function ( geometry ) {\n\n\t\tvar oldVertices, oldFaces, oldUvs;\n\t\tvar newVertices, newFaces, newUVs;\n\n\t\tvar n, l, i, il, j, k;\n\t\tvar metaVertices, sourceEdges;\n\n\t\toldVertices = new TypedArrayHelper( 0, 3, THREE.Vector3, Float32Array, 3, XYZ );\n\t\toldFaces = new TypedArrayHelper( 0, 3, THREE.Face3, Uint32Array, 3, ABC );\n\t\toldUvs = new TypedArrayHelper( 0, 3, THREE.Vector2, Float32Array, 2, XY );\n\t\toldVertices.from_existing( geometry.getAttribute( 'position' ).array );\n\t\toldFaces.from_existing( geometry.index.array );\n\t\toldUvs.from_existing( geometry.getAttribute( 'uv' ).array );\n\n\t\tvar doUvs = false;\n\n\t\tif ( typeof oldUvs !== 'undefined' && oldUvs.length !== 0 ) {\n\n\t\t\tdoUvs = true;\n\n\t\t}\n\t\t/******************************************************\n\t\t*\n\t\t* Step 0: Preprocess Geometry to Generate edges Lookup\n\t\t*\n\t\t*******************************************************/\n\n\t\tmetaVertices = new Array( oldVertices.length );\n\t\tsourceEdges = {}; // Edge => { oldVertex1, oldVertex2, faces[]  }\n\n\t\tgenerateLookups( oldVertices, oldFaces, metaVertices, sourceEdges );\n\n\n\t\t/******************************************************\n\t\t*\n\t\t*\tStep 1.\n\t\t*\tFor each edge, create a new Edge Vertex,\n\t\t*\tthen position it.\n\t\t*\n\t\t*******************************************************/\n\n\t\tnewVertices = new TypedArrayHelper( ( geometry.getAttribute( 'position' ).array.length * 2 ) / 3, 2, THREE.Vector3, Float32Array, 3, XYZ );\n\t\tvar other, currentEdge, newEdge, face;\n\t\tvar edgeVertexWeight, adjacentVertexWeight, connectedFaces;\n\n\t\tvar tmp = newVertices.register[ 1 ];\n\t\tfor ( i in sourceEdges ) {\n\n\t\tcurrentEdge = sourceEdges[ i ];\n\t\tnewEdge = newVertices.register[ 0 ];\n\n\t\tedgeVertexWeight = 3 / 8;\n\t\tadjacentVertexWeight = 1 / 8;\n\n\t\tconnectedFaces = currentEdge.faces.length;\n\n\t\t// check how many linked faces. 2 should be correct.\n\t\tif ( connectedFaces !== 2 ) {\n\n\t\t\t// if length is not 2, handle condition\n\t\t\tedgeVertexWeight = 0.5;\n\t\t\tadjacentVertexWeight = 0;\n\n\t\t}\n\n\t\toldVertices.index_to_register( currentEdge.a, 0 );\n\t\toldVertices.index_to_register( currentEdge.b, 1 );\n\t\tnewEdge.addVectors( oldVertices.register[ 0 ], oldVertices.register[ 1 ] ).multiplyScalar( edgeVertexWeight );\n\n\t\ttmp.set( 0, 0, 0 );\n\n\t\tfor ( j = 0; j < connectedFaces; j++ ) {\n\n\t\t\toldFaces.index_to_register( currentEdge.faces[ j ], 0 );\n\t\t\tface = oldFaces.register[ 0 ];\n\n\t\t\tfor ( k = 0; k < 3; k++ ) {\n\n\t\t\t\toldVertices.index_to_register( face[ ABC[ k ] ], 2 );\n\t\t\t\tother = oldVertices.register[ 2 ];\n\n\t\t\t\tif ( face[ ABC[ k ] ] !== currentEdge.a && face[ ABC[ k ] ] !== currentEdge.b) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t}\n\n\t\ttmp.add( other );\n\n\t\t}\n\n\t\ttmp.multiplyScalar( adjacentVertexWeight );\n\t\tnewEdge.add( tmp );\n\n\t\tcurrentEdge.newEdge = newVertices.length;\n\t\tnewVertices.push_element( newEdge );\n\n\t\t}\n\n\t\tvar edgeLength = newVertices.length;\n\t\t/******************************************************\n\t\t*\n\t\t*\tStep 2.\n\t\t*\tReposition each source vertices.\n\t\t*\n\t\t*******************************************************/\n\n\t\tvar beta, sourceVertexWeight, connectingVertexWeight;\n\t\tvar connectingEdge, connectingEdges, oldVertex, newSourceVertex;\n\n\t\tfor ( i = 0, il = oldVertices.length; i < il; i++ ) {\n\n\t\t\toldVertices.index_to_register( i, 0, XYZ );\n\t\t\toldVertex = oldVertices.register[ 0 ];\n\n\t\t\t// find all connecting edges (using lookupTable)\n\t\t\tconnectingEdges = metaVertices[ i ].edges;\n\t\t\tn = connectingEdges.length;\n\n\t\t\tif ( n === 3 ) {\n\n\t\t\t\tbeta = 3 / 16;\n\n\t\t\t} else if (n > 3) {\n\n\t\t\t\tbeta = 3 / (8 * n); // Warren's modified formula\n\n\t\t\t}\n\n\t\t\t// Loop's original beta formula\n\t\t\t// beta = 1 / n * ( 5/8 - Math.pow( 3/8 + 1/4 * Math.cos( 2 * Math. PI / n ), 2) );\n\n\t\t\tsourceVertexWeight = 1 - n * beta;\n\t\t\tconnectingVertexWeight = beta;\n\n\t\t\tif ( n <= 2 ) {\n\n\t\t\t\t// crease and boundary rules\n\n\t\t\t\tif ( n === 2 ) {\n\n\t\t\t\t\tsourceVertexWeight = 3 / 4;\n\t\t\t\t\tconnectingVertexWeight = 1 / 8;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnewSourceVertex = oldVertex.multiplyScalar( sourceVertexWeight );\n\n\t\t\ttmp.set( 0, 0, 0 );\n\n\t\t\tfor ( j = 0; j < n; j++ ) {\n\n\t\t\t\tconnectingEdge = connectingEdges[ j ];\n\t\t\t\tother = connectingEdge.a !== i ? connectingEdge.a : connectingEdge.b;\n\t\t\t\toldVertices.index_to_register( other, 1, XYZ );\n\t\t\t\ttmp.add( oldVertices.register[ 1 ] );\n\n\t\t\t}\n\n\t\t\ttmp.multiplyScalar( connectingVertexWeight );\n\t\t\tnewSourceVertex.add( tmp );\n\n\t\t\tnewVertices.push_element( newSourceVertex,XYZ );\n\n\t\t}\n\n\n\t\t/******************************************************\n\t\t*\n\t\t*\tStep 3.\n\t\t*\tGenerate faces between source vertices and edge vertices.\n\t\t*\n\t\t*******************************************************/\n\n\n\t\tvar edge1, edge2, edge3;\n\t\tnewFaces = new TypedArrayHelper( ( geometry.index.array.length * 4 ) / 3, 1, THREE.Face3, Float32Array, 3, ABC );\n\t\tnewUVs = new TypedArrayHelper( ( geometry.getAttribute( 'uv' ).array.length * 4 ) / 2, 3, THREE.Vector2, Float32Array, 2, XY );\n\t\tvar x3 = newUVs.register[ 0 ];\n\t\tvar x4 = newUVs.register[ 1 ];\n\t\tvar x5 = newUVs.register[ 2 ];\n\t\tvar tFace = newFaces.register[ 0 ];\n\n\t\tfor ( i = 0, il = oldFaces.length; i < il; i++ ) {\n\n\t\t\toldFaces.index_to_register( i, 0 );\n\t\t\tface = oldFaces.register[ 0 ];\n\n\t\t\t// find the 3 new edges vertex of each old face\n\t\t\t// The new source verts are added after the new edge verts now..\n\n\t\t\tedge1 = getEdge( face.a, face.b, sourceEdges ).newEdge;\n\t\t\tedge2 = getEdge( face.b, face.c, sourceEdges ).newEdge;\n\t\t\tedge3 = getEdge( face.c, face.a, sourceEdges ).newEdge;\n\n\t\t\t// create 4 faces.\n\t\t\ttFace.set( edge1, edge2, edge3 );\n\t\t\tnewFace( newFaces, tFace );\n\t\t\ttFace.set( face.a + edgeLength, edge1, edge3 );\n\t\t\tnewFace( newFaces, tFace );\n\t\t\ttFace.set( face.b + edgeLength, edge2, edge1 );\n\t\t\tnewFace( newFaces, tFace );\n\t\t\ttFace.set( face.c + edgeLength, edge3, edge2 );\n\t\t\tnewFace( newFaces, tFace );\n\n\n\t\t\t/*\n\t\t\t\t0________C_______2\n\t\t\t\t \\      /\\      /\n\t\t\t\t  \\ F2 /  \\ F4 /\n\t\t\t\t   \\  / F1 \\  /\n\t\t\t\t    \\/______\\/\n\t\t\t\t   A \\      / B\n\t\t\t\t      \\ F3 /\n\t\t\t\t       \\  /\n\t\t\t\t        \\/\n\t\t\t\t         1\n\n\t\t\t\tDraw orders:\n\t\t\t\tF1: ABC x3,x4,x5\n\t\t\t\tF2: 0AC x0,x3,x5\n\t\t\t\tF3: 1BA x1,x4,x3\n\t\t\t\tF4: 2CB x2,x5,x4\n\n\t\t\t\t0: x0\n\t\t\t\t1: x1\n\t\t\t\t2: x2\n\t\t\t\tA: x3\n\t\t\t\tB: x4\n\t\t\t\tC: x5\n\t\t\t*/\n\n\t\t\tif ( doUvs === true ) {\n\n\t\t\t\toldUvs.index_to_register( ( i * 3 ) + 0, 0 );\n\t\t\t\toldUvs.index_to_register( ( i * 3 ) + 1, 1 );\n\t\t\t\toldUvs.index_to_register( ( i * 3 ) + 2, 2 );\n\n\t\t\t\tvar x0 = oldUvs.register[ 0 ]; // uv[0];\n\t\t\t\tvar x1 = oldUvs.register[ 1 ]; // uv[1];\n\t\t\t\tvar x2 = oldUvs.register[ 2 ]; // uv[2];\n\n\t\t\t\tx3.set( midpoint( x0.x, x1.x ), midpoint( x0.y, x1.y ) );\n\t\t\t\tx4.set( midpoint( x1.x, x2.x ), midpoint( x1.y, x2.y ) );\n\t\t\t\tx5.set( midpoint( x0.x, x2.x ), midpoint( x0.y, x2.y ) );\n\n\t\t\t\tnewUv( newUVs, x3, x4, x5 );\n\t\t\t\tnewUv( newUVs, x0, x3, x5 );\n\n\t\t\t\tnewUv( newUVs, x1, x4, x3 );\n\t\t\t\tnewUv( newUVs, x2, x5, x4 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Overwrite old arrays\n\n\t\tnewFaces.trim_size();\n\t\tnewVertices.trim_size();\n\t\tnewUVs.trim_size();\n\n\t\tgeometry.setIndex( new THREE.BufferAttribute( newFaces.buffer ,3 ) );\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( newVertices.buffer, 3 ) );\n\t\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( newUVs.buffer, 2 ) );\n\n\t};\n\n} ) ();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/glow.mjs\n");

/***/ })

/******/ });